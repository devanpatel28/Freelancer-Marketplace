//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Freelancer_Marketplace.Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Freelancer_Marketplace_DBEntities : DbContext
    {
        public Freelancer_Marketplace_DBEntities()
            : base("name=Freelancer_Marketplace_DBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<bid> bids { get; set; }
        public virtual DbSet<calendar_events> calendar_events { get; set; }
        public virtual DbSet<chatmessage> chatmessages { get; set; }
        public virtual DbSet<project> projects { get; set; }
        public virtual DbSet<reported_issues> reported_issues { get; set; }
        public virtual DbSet<reviews_ratings> reviews_ratings { get; set; }
        public virtual DbSet<user_profiles> user_profiles { get; set; }
        public virtual DbSet<usersdata> usersdatas { get; set; }
        public virtual DbSet<takenproject> takenprojects { get; set; }
        public virtual DbSet<uploadedproject> uploadedprojects { get; set; }
    
        public virtual int AddReviewAndRating(Nullable<int> reviewedUserID, Nullable<int> reviewerID, Nullable<int> ratingScore)
        {
            var reviewedUserIDParameter = reviewedUserID.HasValue ?
                new ObjectParameter("reviewedUserID", reviewedUserID) :
                new ObjectParameter("reviewedUserID", typeof(int));
    
            var reviewerIDParameter = reviewerID.HasValue ?
                new ObjectParameter("reviewerID", reviewerID) :
                new ObjectParameter("reviewerID", typeof(int));
    
            var ratingScoreParameter = ratingScore.HasValue ?
                new ObjectParameter("ratingScore", ratingScore) :
                new ObjectParameter("ratingScore", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddReviewAndRating", reviewedUserIDParameter, reviewerIDParameter, ratingScoreParameter);
        }
    
        public virtual int CloseProject(Nullable<int> projectID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("projectID", projectID) :
                new ObjectParameter("projectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CloseProject", projectIDParameter);
        }
    
        public virtual int CreateProject(Nullable<int> clientID, string projectTitle, string projectDescription, Nullable<decimal> projectBudget, Nullable<System.DateTime> projectDeadline)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("clientID", clientID) :
                new ObjectParameter("clientID", typeof(int));
    
            var projectTitleParameter = projectTitle != null ?
                new ObjectParameter("projectTitle", projectTitle) :
                new ObjectParameter("projectTitle", typeof(string));
    
            var projectDescriptionParameter = projectDescription != null ?
                new ObjectParameter("projectDescription", projectDescription) :
                new ObjectParameter("projectDescription", typeof(string));
    
            var projectBudgetParameter = projectBudget.HasValue ?
                new ObjectParameter("projectBudget", projectBudget) :
                new ObjectParameter("projectBudget", typeof(decimal));
    
            var projectDeadlineParameter = projectDeadline.HasValue ?
                new ObjectParameter("projectDeadline", projectDeadline) :
                new ObjectParameter("projectDeadline", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateProject", clientIDParameter, projectTitleParameter, projectDescriptionParameter, projectBudgetParameter, projectDeadlineParameter);
        }
    
        public virtual ObjectResult<GetBidsForProject_Result> GetBidsForProject(Nullable<int> projectID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("projectID", projectID) :
                new ObjectParameter("projectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBidsForProject_Result>("GetBidsForProject", projectIDParameter);
        }
    
        public virtual ObjectResult<GetMessagesInConversation_Result> GetMessagesInConversation(Nullable<int> senderID, Nullable<int> recipientID)
        {
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("senderID", senderID) :
                new ObjectParameter("senderID", typeof(int));
    
            var recipientIDParameter = recipientID.HasValue ?
                new ObjectParameter("recipientID", recipientID) :
                new ObjectParameter("recipientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMessagesInConversation_Result>("GetMessagesInConversation", senderIDParameter, recipientIDParameter);
        }
    
        public virtual ObjectResult<GetProjectByID_Result> GetProjectByID(Nullable<int> projectID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("projectID", projectID) :
                new ObjectParameter("projectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProjectByID_Result>("GetProjectByID", projectIDParameter);
        }
    
        public virtual ObjectResult<GetUserByID_Result> GetUserByID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserByID_Result>("GetUserByID", userIDParameter);
        }
    
        public virtual ObjectResult<GetUserOpenProjects_Result> GetUserOpenProjects(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserOpenProjects_Result>("GetUserOpenProjects", userIDParameter);
        }
    
        public virtual ObjectResult<GetUserProfileByID_Result> GetUserProfileByID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserProfileByID_Result>("GetUserProfileByID", userIDParameter);
        }
    
        public virtual ObjectResult<GetUserProjects_Result> GetUserProjects(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserProjects_Result>("GetUserProjects", userIDParameter);
        }
    
        public virtual int SendMessage(Nullable<int> senderID, Nullable<int> recipientID, string messageContent, Nullable<System.DateTime> chattime)
        {
            var senderIDParameter = senderID.HasValue ?
                new ObjectParameter("senderID", senderID) :
                new ObjectParameter("senderID", typeof(int));
    
            var recipientIDParameter = recipientID.HasValue ?
                new ObjectParameter("recipientID", recipientID) :
                new ObjectParameter("recipientID", typeof(int));
    
            var messageContentParameter = messageContent != null ?
                new ObjectParameter("messageContent", messageContent) :
                new ObjectParameter("messageContent", typeof(string));
    
            var chattimeParameter = chattime.HasValue ?
                new ObjectParameter("chattime", chattime) :
                new ObjectParameter("chattime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SendMessage", senderIDParameter, recipientIDParameter, messageContentParameter, chattimeParameter);
        }
    
        public virtual ObjectResult<SP_GetProjectsAndUserName_Result> SP_GetProjectsAndUserName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetProjectsAndUserName_Result>("SP_GetProjectsAndUserName");
        }
    
        public virtual int SubmitBid(Nullable<int> projectID, Nullable<int> freelancerID, Nullable<decimal> bidAmount, string proposalText, Nullable<System.DateTime> bidTime)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("projectID", projectID) :
                new ObjectParameter("projectID", typeof(int));
    
            var freelancerIDParameter = freelancerID.HasValue ?
                new ObjectParameter("freelancerID", freelancerID) :
                new ObjectParameter("freelancerID", typeof(int));
    
            var bidAmountParameter = bidAmount.HasValue ?
                new ObjectParameter("bidAmount", bidAmount) :
                new ObjectParameter("bidAmount", typeof(decimal));
    
            var proposalTextParameter = proposalText != null ?
                new ObjectParameter("proposalText", proposalText) :
                new ObjectParameter("proposalText", typeof(string));
    
            var bidTimeParameter = bidTime.HasValue ?
                new ObjectParameter("bidTime", bidTime) :
                new ObjectParameter("bidTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SubmitBid", projectIDParameter, freelancerIDParameter, bidAmountParameter, proposalTextParameter, bidTimeParameter);
        }
    
        public virtual int UpdateProjectStatus(Nullable<int> projectID, string newStatus)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("projectID", projectID) :
                new ObjectParameter("projectID", typeof(int));
    
            var newStatusParameter = newStatus != null ?
                new ObjectParameter("newStatus", newStatus) :
                new ObjectParameter("newStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProjectStatus", projectIDParameter, newStatusParameter);
        }
    
        public virtual int UpdateUserProfile(Nullable<int> userID, string newBio, string newPortfolio, string newSkills, string newContactInfo, string newSocialLinks)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var newBioParameter = newBio != null ?
                new ObjectParameter("newBio", newBio) :
                new ObjectParameter("newBio", typeof(string));
    
            var newPortfolioParameter = newPortfolio != null ?
                new ObjectParameter("newPortfolio", newPortfolio) :
                new ObjectParameter("newPortfolio", typeof(string));
    
            var newSkillsParameter = newSkills != null ?
                new ObjectParameter("newSkills", newSkills) :
                new ObjectParameter("newSkills", typeof(string));
    
            var newContactInfoParameter = newContactInfo != null ?
                new ObjectParameter("newContactInfo", newContactInfo) :
                new ObjectParameter("newContactInfo", typeof(string));
    
            var newSocialLinksParameter = newSocialLinks != null ?
                new ObjectParameter("newSocialLinks", newSocialLinks) :
                new ObjectParameter("newSocialLinks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUserProfile", userIDParameter, newBioParameter, newPortfolioParameter, newSkillsParameter, newContactInfoParameter, newSocialLinksParameter);
        }
    }
}
